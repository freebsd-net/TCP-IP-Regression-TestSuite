#!/usr/bin/env sh

##################################################
# Automation script for running tests            #
# A default tolerance value of 1 second is used. #
##################################################

if [ "$(uname)" = FreeBSD ]; then
  packetdrill=/usr/local/bin/packetdrill
else
  packetdrill=/usr/bin/packetdrill
fi

directory="$1"
extension=".pkt"
TOLERANCE_USECS=1000000

trap clean_up HUP INT TERM

clean_up() {
  printf "\nCleaning up..."
  rm -f tests_list temp.log
  exit 1
}

file=tests_list   # contains the list of ".pkt" files in case the argument is empty or a directory
pkt_file_flag=0   # tracks whether the argument is a ".pkt" file

# Check if path to packetdrill binary is set
if [ -z $packetdrill ]; then
  printf "Please set the value of \$packetdrill variable to the path of packetdrill binary on your machine.\n"
  exit 1
fi

# Handle invalid argument
if [ ! -z "$directory" ] && [ ! -e "$directory" ]; then
  echo "File not found!"
  exit 1
fi

# Check if the argument is a ".pkt" file
if test "${directory#*$extension}" != "$directory"; then
  pkt_file_flag=1
fi

# Check if the argument is a directory
if [ ! -z "$directory" ]; then
  # Avoid generating "tests_list" in every run
  if [ $pkt_file_flag = 0 ] && [ ! -f "$directory/tests_list" ]; then
    sh update-test-list "$directory/tests_list" "$directory"
  fi
  file="$directory/tests_list"
else
  sh update-test-list tests_list
fi

delay=0.2     # delay between subsequent tests run
run=0         # number of tests run
skipped=0     # number of tests skipped
passed=0      # number of tests passed
failed=0      # number of tests failed

# Modify values depending on return status
check_status() {
  run=$((run + 1))
  if [ "$result" = 1 ]; then
    {
      printf "Test Name: %s\n" "$testname" >> error.log
      printf "\---------------------------------------------------------\n"
      cat temp.log
      printf "\n"
    } >> error.log
    printf "\033[31mFAILED\033[39m\n"
    printf "\---------------------------------------------------------------\n"
    failed=$((failed + 1))
  else
    printf "\033[33mPASSED\033[39m\n"
    printf "\---------------------------------------------------------------\n"
    passed=$((passed + 1))
  fi
}

rm -f error.log
{
  printf "Error log of tests run at %s\n" "$(date)"
  printf "===============================================================\n\n"
} > error.log
printf "\nScript Name                                             Result\n"
printf "===============================================================\n"

# Check if a single test script or a directory is given as argument
if [ $pkt_file_flag = 1 ]; then
  printf "%-55.55s " "$directory"
  if [ -e "$directory" ]; then
    rm -f temp.log
    $packetdrill -v --tolerance_usecs=$TOLERANCE_USECS "$directory" >> temp.log 2>&1
    result=$?
    testname=$(basename "$directory")
    check_status
  else
    printf "\033[32mSKIPPED\033[39m\n"
    skipped=$((skipped + 1))
  fi

else
  while IFS= read -r test
  do
    printf "%-55.55s " "$test"
    sleep $delay
    if [ -e "${test}".pkt ]; then
      rm -f temp.log
      $packetdrill -v --tolerance_usecs=$TOLERANCE_USECS "${test}".pkt >> temp.log 2>&1
      result=$?
      testname=$(basename "$test")
      check_status
    else
      printf "\033[32mSKIPPED\033[39m\n"
      skipped=$((skipped + 1))
    fi
  done< "$file"
  rm -f temp.log tests_list
fi

if [ $run = 0 ]; then
  printf "\033[32mMake sure that you have specified the correct .pkt file\033[39m\n"
  exit 1
fi

printf "\nSummary\n"
printf "===========================\n"

printf "Number of tests run: %6d\n" $run
printf "Number of tests passed: %3d\n" $passed
printf "Number of tests failed: %3d\n" $failed
printf "Number of tests skipped: %2d\n\n" $skipped

if [ $failed -ne 0 ]; then
  printf "\nView the log file \"error.log\" for details\n"
fi
